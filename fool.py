import array
import ctypes
import datetime
import os
import re
import struct
import sys
import traceback
import unittest

try:
    import tests
except ImportError:
    pass
    
#TODO: Create disks with >=32 reserved sectors (16KB)
#then write vbr boot code to it: Set protected mode, load
#kernel, etc.
#MBR needs to have valid partition
#VBR needs to start 0xeb xx 0x90 per wikipedia: jmp short
#Work with fat16 disks too?

#Require disk size to be >= 32MB so we can use fat32
#Don't let users create names of . or .. in the root

def log(*args):
    return
    tb = traceback.extract_stack()
    T=tb[-2]
    tmp = [str(q) for q in args]
    
    x = "{} {} {}".format(T[0].split("/")[-1], T[2], T[1] )
    
    print("LOG: {:30} {}".format( x,  
        " ".join(tmp) ),file=sys.stderr)

class FException(RuntimeError):
    def __init__(self,msg=""):
        super().__init__(msg)
        self.message=msg
    
    
def copy( src, srcidx, dst, dstidx, count):
    tmp = src[srcidx:srcidx+count]
    dst[dstidx:dstidx+len(tmp)] = tmp
  
    
diskfile = None
vbr = None
fat = None
fs = None
 

def usage():
    print("fool: A FAT disk tool");
    print("2020 SSU ETEC 3701");
    print("Usage: fool hd.img {commands}");
    print("Commands consist of one or more of these:");
    print("create {size in MB}            Create disk image file");
    print("ls {path}                      List directory");
    print("cat {path}                     Display contents of file");
    print("mkdir {path}                   Create directory");
    print("stat {path}                    Get info about file");
    print("cp {path1} {path2}             Copy local file path1 to image as path2");
    print("rm {path}                      Remove (delete) file");
    print("dumpsector {num}               Dump contents of sector");
    print("dumpcluster {num}              Dump contents of cluster");
    print("dumpvbr                        Dump contents of VBR");
    print("dumpfat {first} {last}         Dump contents of FAT entries first...last");


def readCluster(clusterNumber):
    log("readCluster",clusterNumber)
    assert vbr.data_start > 0
    assert vbr.sectors_per_cluster > 0
    secnum = vbr.data_start + vbr.sectors_per_cluster * (clusterNumber - 2);
    fs.seek(secnum*512)
    b=fs.read(vbr.bytes_per_cluster)
    return b;

#read up to min{ size, data_in_cluster_chain} bytes
def readFile( clusters, size ):
    log("readFile: Clusters=",clusters,"size=",size)
    #List<uint> clusters, uint size
    assert vbr.sectors_per_cluster != 0
    maxdata = (vbr.sectors_per_cluster * 512 * len(clusters))
    if(size < 0 or size > maxdata):
        size = maxdata;
    rv = [0]*size
    amountRead = 0;
    amountRemaining = size;
    ci = 0;
    while(ci < len(clusters) and amountRemaining > 0 ):
        data = readCluster(clusters[ci]);
        le = len(data)
        if amountRemaining < le:
            amt = amountRemaining
        else:
            amt = le
        rv[amountRead:amountRead+amt] = data[0:amt]
        amountRead += amt;
        amountRemaining -= amt;
        ci += 1

    return rv

def readdir(arg):
    log("readdir",arg)
    if type(arg) == str:
        dirpath = arg
        if(dirpath == ""):
            fc = vbr.root_cluster;
        else:
            #DirEntry de;
            b,de = doStat(dirpath)
            if b == False:
                raise FException("Path " + dirpath + " not found");
            if( not de.shortentry.isDirectory):
                raise FException("Path " + dirpath + " is not a directory");
            fc = de.firstCluster;
        return readdir(fc);
    elif type(arg) == int:
        log("readdir: First cluster=",arg)
        firstCluster=arg
        dirClusterChain = fat.getClusterChain(firstCluster);
        # ~ log("dirClusterChain:",len(dirClusterChain),"entries")
        dirData = readFile(dirClusterChain, 0xffffffff);
        log("dirData=","".join([chr(x) for x in dirData[:128]]))
        idx = 0;
        L = DirEntryList();
        while(True):
            de,idx = DirEntry.make(dirData,idx)
            if(de != None):
                L.append(de)
                log("Got dir entry:",de)
            else :
                break;
        return L
    else:
        assert 0

def doStat(path):
    log("doStat(",path,")")
    try:
        path = normalizePath(path);
        log("Normalized path:",path)
        if(path == ""):
            #root directory: Special case
            log("Root")
            dirent = DirEntry();
            dirent.firstCluster = vbr.root_cluster;
            dirent.shortentry.attributes = ShortDirEntry.DIRECTORY;
            return True,dirent

        firstCluster = vbr.root_cluster;
        components = path.split("/")
        log("doStat: components=",components)
        for i in range(len(components)):
            log("doStat: Processing component",i,"=",components[i])
            dents = readdir(firstCluster);
            foundIt = False;
            for j in range(len(dents)):
                if(dents[j].nameMatches(components[i]) ):
                    log("Found match for",components[i],"in dents[",j,"]=",dents[j])
                    if(i == len(components) - 1) :
                        dirent = dents[j];
                        log("doStat: Last one! Return:",dirent)
                        return True,dirent;
                    else:
                        firstCluster = dents[j].firstCluster;
                        foundIt = True;
                        break;
            if not foundIt:
                log("doStat: Did not find entry")
                return False,None
        log("doStat: Did not find entry (2)")
        return False,None
    finally:
        log("doStat: Done")

def writeCluster( c, data):
    log("writeCluster",c,"with", "".join( [chr(x) for x in data[:96]] ) )
    if(len(data) != vbr.bytes_per_cluster):
        raise Exception("data size != cluster size");
    sz = vbr.bytes_per_sector;
    sec = vbr.data_start + (c - 2) * vbr.sectors_per_cluster;
    for i in range(vbr.sectors_per_cluster):
        tmp = data[i*sz:i*sz+sz]
        Utils.writeSector(fs, sec, tmp);
        sec+=1


#if firstCluster is 0, assumes existing file has no clusters.
#Re-uses as many clusters as possible for the file, then allocates new ones
#if file size is larger. If file has shrunk, truncate cluster chain.
#Returns first cluster, or zero if empty file.
#If data is not a multiple of the cluster size, the file will
#be padded with arbitrary data.
def writeFile(data,firstCluster,useFirstFreeSpace):
     
    log("writeFile: to cluster",firstCluster,"data=",data[:96])
    #special case: if the file is zero size,
    #free all clusters
    if len(data) == 0:
        if(firstCluster != 0):
            fat.freeChain(firstCluster);
        return 0;
    
    if(firstCluster == 0):
        firstCluster = fat.getAnotherCluster(0,useFirstFreeSpace);
        log("got cluster",firstCluster,"to start the file")
        
    start = 0;
    sz = vbr.bytes_per_cluster;
    c = firstCluster;
    b = [0]*vbr.bytes_per_cluster
    while(start < len(data)):
        dataLeft = len(data) - start;
        if dataLeft >= len(b):
            copy(data, start, b, 0, len(b));
        else:
            copy(data, start, b, 0, dataLeft);
            for i in range(dataLeft,len(b)):
                b[i] = (65 + (i % 26));   #random padding
        writeCluster(c, b);
        start += len(b)
        if start < len(data):
            c = fat.getAnotherCluster(c,useFirstFreeSpace);
            log("got another cluster:",c)
        else:
            fat.freeAllClustersAfter(c);

    return firstCluster;


def updateDirEntryForFile(path,newdata):
    #pde = parent dir entry
    head = dirname(path);
    found,pde = doStat(head)
    if not found:
        raise FException("Not found");
    
    tail = filename(path);
    dents = readdir(head);
    for i in range(len(dents)):
        if(dents[i].nameMatches(tail)):
            dents[i] = newdata;
            writeFile(dents.toBytes(vbr.bytes_per_cluster), pde.firstCluster, False);
            return;
            
    if head == "":
        par = "root directory"
    else:
        par = "directory "+head
        
    raise RuntimeError("Could not find information about file "+tail+" in " + par )

    
def dirname( path):
    path = normalizePath(path);
    idx = path.rfind('/');
    if(idx == -1):
        return "";
    else:
        return path[0:idx]

def filename(path):
    path = normalizePath(path);
    idx = path.rfind('/');
    if(idx == -1):
        return path;
    else:
        return path[idx + 1:]

def mkdir( path):
    log("mkdir",path)
    
    found, de = doStat(path)
    if found:
        raise FException("File exists");

    head = dirname(path);
    tail = filename(path);

    #pde = parent dir entry
    found, pde = doStat(head)
    if not found:
        raise FException("Not found");

    L = readdir(head);

    #write dummy data to allocate a cluster
    cl = writeFile(bytes(vbr.bytes_per_cluster), 0, False);
    de = DirEntry(tail, ShortDirEntry.DIRECTORY, L);
    de.firstCluster = cl;

    log("mkdir: Allocated cluster",cl,"for",path)
    
    #now rewrite with the data we really want

    de_dot = ShortDirEntry(".", ShortDirEntry.DIRECTORY);
    de_dot.firstCluster = cl;
    de_dotdot = ShortDirEntry("..", ShortDirEntry.DIRECTORY);
    if(pde.isRoot ):
        de_dotdot.firstCluster = 0;     #the root directory
    else :
        de_dotdot.firstCluster = pde.firstCluster;

    B = de_dot.toBytes()
    B += de_dotdot.toBytes()
    if len(B) % vbr.bytes_per_cluster:
        padding = vbr.bytes_per_cluster - (len(B) % vbr.bytes_per_cluster)
        B += bytes(padding)
        
    #rewrite the file with the correct data
    writeFile(B, cl, False );

    L.append(de);
    writeFile(L.toBytes(vbr.bytes_per_cluster), pde.firstCluster, False);


def rm(path):
    found,de = doStat(path)
    if not found:
        raise FException("No such file " + path);

    if(de.shortentry.name == "." or de.shortentry.name == ".." ):
        raise FException("Cannot delete special file "+de.shortentry.name);

    if(de.shortentry.isDirectory):
        L = readdir(de.firstCluster);
        if(len(L) != 2):
            raise FException("Cannot remove non-empty directory");

    if( de.firstCluster != 0 ):
        fat.freeChain(de.firstCluster);

    log("Marking direntry as deleted:",de)
    de.markAsDeleted();

    found,pde = doStat(dirname(path))
    
    if not found:
        raise Exception();
    
    log("updating direntry for path",path,de)
    updateDirEntryForFile( path , de);


slashrex = re.compile(r"/{2,}")
def normalizePath( p):
    p = p.replace("\\", "/");
    p = slashrex.sub("/",p)
    if(p.startswith("/")):
        p = p[1:]
    return p;
        
def stat(path):
    found,de = doStat(path)
    if not found:
        raise FException("Bad path");
    if(de == None):
        raise FException("Cannot stat root directory");
    print("Short name: " + de.shortentry.name);
    print("Long name: " + de.longname);
    
    print("Attributes:",de.shortentry.attributes ," (",end="")
    print(" ReadOnly=" , (0!=(de.shortentry.attributes & ShortDirEntry.READONLY)),end="")
    print(" Hidden=" , (0!=(de.shortentry.attributes & ShortDirEntry.HIDDEN)),end="")
    print(" System=" , (0!=(de.shortentry.attributes & ShortDirEntry.SYSTEM)),end="")
    print(" Volume=" , (0!=(de.shortentry.attributes & ShortDirEntry.VOLUME)),end="")
    print(" Directory=" , (0!=(de.shortentry.attributes & ShortDirEntry.DIRECTORY)),end="")
    print(" Archive=" , (0!=(de.shortentry.attributes & ShortDirEntry.ARCHIVE)),end="")
    print(" )");
    print("Created: " , de.shortentry.created);
    print("Modified: " , de.shortentry.lastModified);
    print("Accessed: " , de.shortentry.lastAccessed);
    print("First cluster: " , de.shortentry.firstCluster);
    print("Size: " , de.shortentry.size);
    print("Clusters: ",end="");
    for c in  fat.getClusterChain(de.shortentry.firstCluster):
        print(c,end=" ");
    print();

def ls(path):
    log("Doing ls of",path)
    print()
    L = readdir(path);
    print(DirEntry.getHeader());
    for de in L:
        print(de);

def cat(path):
    found,dirent = doStat(path)
    if not found:
        raise FException("No such file");
    if(dirent == None or not dirent.shortentry.isFile):
        raise FException("Cannot cat a non-file");
    cl = fat.getClusterChain(dirent.shortentry.firstCluster);
    b = readFile(cl,dirent.shortentry.size);
    for bb in b:
        if( (bb >= 32 and bb <= 126) or bb == 10 or bb == 13 or bb == 9 ):  #9=\t
            sys.stdout.write( chr(bb) )
        else:
            sys.stdout.write( "<%02x>" % bb )
    sys.stdout.write("\n")
    
def cp( src, dst):
    log("cp",src,"   TO    ",dst)
    found,_ = doStat(dst)
    if found:
        raise FException("Destination " + dst + " exists");
    head = dirname(dst);
    tail = filename(dst);
    with open(src,"rb") as xp:
        data = xp.read()
        
    if len(readdir(vbr.root_cluster)) == 0:
        thisIsFirstFile = True
    else:
        thisIsFirstFile = False
    log("cp: writing file")
    cl = writeFile(data,0,thisIsFirstFile);
    log("cp: created file at cluster",cl)
    entries = readdir(head);
    de = DirEntry(tail, 0, entries);
    de.firstCluster = cl;
    de.shortentry.size = len(data);
    entries.append(de);
    found,pde = doStat(head)
    assert found
    writeFile(entries.toBytes(vbr.bytes_per_cluster), pde.firstCluster, False);

def create(fname,sizeMB):
    if sizeMB < 33:
        raise FException("Size must be at least 33MB");

    with open(fname,"wb") as fs:
        sizeBytes = sizeMB * 1024 * 1024;
        fs.seek(sizeBytes-1)
        fs.write(bytes(1))
        vbr = VBR(0,sizeBytes);
        bb = bootblock
        copy(bb, 90, vbr.code, 0, len(vbr.code))
        Utils.writeSector(fs, 0, vbr.toBytes());
        isec = InfoSector()
        isec.write(fs,vbr)
        Utils.writeSector(fs, vbr.backup_boot_sector, vbr.toBytes());
        fs.write(bb[3*512:3*512+len(bb)-3*512])
        zeros = bytearray(512)
        s = vbr.fat_start;
        for j in range(vbr.num_fats):
            for i in range(vbr.sectors_per_fat_32):
                if(i == 0):
                    #set entries 0,1 as used. Set entry 2 (root dir) as EOF.
                    for k in range(3):
                        zeros[4*k] = 0xff;
                        zeros[4*k+1] = 0xff;
                        zeros[4*k+2] = 0xff;
                        zeros[4*k+3] = 0x0f;
                Utils.writeSector(fs,s,zeros);
                s+=1
                if(i == 0):
                    for k in range(12):
                        zeros[k] = 0;

def ensureOpen():
    global diskfile,fs,vbr,fat
    if fs == None:
        fs = open(diskfile,"r+b")
        b = fs.read(512)
        vbr = VBR(b);
        fat = FAT(fs, vbr);

def ensureClosed():
    global fs,vbr,fat
    if fs:
        fat.writeDirty();
        isec = InfoSector()
        isec.write(fs, vbr);
        fs.close()
        fs=None
        vbr=None
        fat=None

def dumpSector(sec):
    with open(diskfile,"rb") as fs:
        fs.seek(sec * 512, 0)
        b = fs.read(512)
        print("Sector ", sec);
        outputData(b,16);

def outputData(b, bytesPerLine):
    for i in range(0,len(b),bytesPerLine):
        print("%4d | " % i, end="")
        for j in range(bytesPerLine):
            print("%02x " % b[i+j],end="")
        print("| ",end="")
        for j in range(bytesPerLine):
            if(b[i + j] >= 32 and b[i + j] < 127):
                print( chr(b[i + j]),end="" )
            else:
                print(".",end="")
        print();

def dumpCluster(cl):
    sec = vbr.data_start + (cl - 2) * vbr.sectors_per_cluster;
    fs.seek(sec*512);
    b = fs.read(vbr.sectors_per_cluster * 512);
    print("Cluster ", cl,"(sectors",sec,"...",sec+vbr.sectors_per_cluster-1,")");
    outputData(b,16);

def dumpVBR():
    with open(diskfile,"rb") as fs:
        b = fs.read(512)
        v = VBR(b);
        print(str(v))

def go(args):
    global diskfile
    
    if len(args) == 0:
        usage();
        return;

    diskfile = args[0];

    i=1
    while(i < len(args)):
        cmd = args[i];
        i+=1

        log("===========================================================")
        log("===========================================================")
        log(cmd)
        log("-----------------------------------------------------------")
        log("-----------------------------------------------------------")
        
        if cmd == "--help":
            usage()
            return
        elif cmd == "create":
            ensureClosed();
            if(i == len(args)):
                raise FException("create requires an argument");
            sz = int(args[i]);
            i+=1
            create(diskfile, sz);
        elif cmd == "ls":
            ensureOpen();
            if(i == len(args)):
                path = "/";
            else:
                path = args[i];
                i+=1
            ls(path);
        elif cmd == "cat":
            ensureOpen();
            if(i == len(args)):
                raise FException("cat requires an argument");
            path = args[i]
            i+=1
            cat(path);
        elif cmd == "mkdir":
            ensureOpen();
            if(i == len(args)):
                raise FException("mkdir requires an argument");
            path = args[i]
            i+=1
            mkdir(path);
        elif cmd == "stat":
            ensureOpen();
            if(i == len(args)):
                raise FException("stat requires an argument");
            path = args[i]
            i+=1
            stat(path);
        elif cmd == "cp":
            ensureOpen();
            if(i >= len(args) - 1):
                raise FException("cp requires two arguments");
            localpath = args[i]
            i+=1
            imgpath = args[i]
            i+=1
            cp(localpath, imgpath);
        elif cmd == "rm":
            if(i == len(args)):
                raise FException("rm requires an argument");
            ensureOpen();
            path = args[i]
            i+=1
            rm(path);
        elif cmd == "dumpsector":
            if(i == len(args)):
                raise FException("dumpsector requires an argument");
            sec = int(args[i])
            i+=1
            ensureClosed();
            dumpSector(sec);
        elif cmd == "dumpcluster":
            if(i == len(args)):
                raise FException("dumpcluster requires an argument");
            sec = int(args[i])
            i+=1
            ensureClosed()
            ensureOpen();
            dumpCluster(sec);
        elif cmd == "dumpvbr":
            ensureClosed();
            dumpVBR();
        elif cmd == "dumpfat":
            ensureOpen();
            if(i >= len(args) - 1):
                raise FException("dumpfat requires two arguments");
            first = int(args[i])
            i+=1
            last = int(args[i])
            i+=1
            print("FAT: Total entries=", fat.numEntries);
            print("FAT 1: Sectors ", fat.first_fat_sector , " ... " ,
                fat.first_fat_sector + vbr.sectors_per_fat_32);
            for j in range(first,last+1):
                print("{1:6,d}: {0:10d} = 0x{0:08x}  " .format(fat[j],j),end="")
                print();
            print();
        else:
            print("Bad command:",cmd)
            usage();
            raise FException("Bad command: "+cmd)
            return;

   
    ensureClosed();


class FAT:
    
    EOF_START =  0x0ffffff8
    EOF = 0x0fffffff
    ENTRIES_PER_SECTOR = 512//4
    
    def __init__(self, fs, vbr):
        self.fs = fs

        #we maintain sectors of fat in RAM
        #key = sector number (expressed as offset from fat start)
        #value = 512 bytes (=128 entries) of fat data, as an array
        self.fatdata = {}
        self.dirty = set() #keys are like those in fatdata
        self.first_fat_sector =  vbr.fat_start
        self.numEntries = vbr.num_clusters
        self.sectors_per_fat = vbr.sectors_per_fat_32
        
    def writeDirty(self):
        for s in self.dirty:
            Utils.writeSector(self.fs, self.first_fat_sector + s, self.fatdata[s].tobytes())
            Utils.writeSector(self.fs, self.first_fat_sector + self.sectors_per_fat + s, self.fatdata[s].tobytes())

    def __getitem__(self,idx):
        v = self.getAndSet(idx,None)
        assert type(v) == int
        return v
        
    def __setitem__(self,idx,value):
        assert type(value) == int
        self.getAndSet(idx,value)
        
    def getAndSet(self,idx,value):
        if(idx >= self.numEntries):
            raise RuntimeError("Attempt to get FAT entry {} but max is {}".format(idx,numEntries))
        sn = (idx // self.ENTRIES_PER_SECTOR)
        if sn not in self.fatdata:
            b = Utils.readSector(self.fs, self.first_fat_sector + sn)
            data = array.array("I", [0]*self.ENTRIES_PER_SECTOR )
            for i in range(0,len(b),4):
                v = (b[i] | (b[i + 1] << 8) | (b[i + 2] << 16) | (b[i + 3] << 24))
                data[i // 4] = v
            self.fatdata[sn] = data
        offs = (idx % self.ENTRIES_PER_SECTOR)
        if value == None:
            return self.fatdata[sn][offs]
        else:
            self.fatdata[sn][offs] = value
            self.dirty.add(sn)
             

    def getClusterChain( self, firstCluster ):
        cl = firstCluster
        assert type(cl) == int
        clusters = []
        while cl < self.EOF_START and cl >= 2:
            clusters.append(cl)
            cl = self[cl]
        return clusters

    def freeChain(self,c):
        while(c >= 2 and c < self.EOF_START) :
            n = self[c]
            self[c] = 0
            c = n

    def freeAllClustersAfter(self,c):
        self.freeChain(self[c])

    def allocCluster(self, useFirstFreeSpace):
        c = 0
        if(useFirstFreeSpace):
            for i in range(2,self.numEntries):
                if self[i] == 0:
                    c = i
                    break
        else:
            choices = []
            i=32
            while i < self.numEntries and len(choices) < 8:
                for delta in range(0,257,128):
                    j = i + delta
                    if j < self.numEntries and self[j] == 0:
                        choices.append(j)
                i+=1
            if len(choices) > 0:
                choices = Utils.shuffle(choices)
                c = choices[0]
            else:
                c=0

        if( c == 0 ):
            raise RuntimeError("Disk is full")

        self[c] = self.EOF
        return c
    

    def getAnotherCluster(self, c,  useFirstFreeSpace):
        if(c == 0 or self[c] >= self.EOF_START):
            n = self.allocCluster(useFirstFreeSpace)
            if(c != 0):
                self[c] = n
            self[n] = self.EOF 
            return n
        else:
            return self[c]


class ShortDirEntry:
    READONLY = 1
    HIDDEN = 2
    SYSTEM=4
    VOLUME=8
    DIRECTORY=16
    ARCHIVE=32
    LFN = 15

    #legal chars:
    #capital letters, numbers, `~!@#$%^&'()-_{}
    #LFN's also allow +=[],.  and lowercase
    legal = "ABCDEFGHIJKLMNOPQRSTUVWXYZ12345678901`~!@#$%^&()-_{}'."

    S = struct.Struct( "11BBBBHHHHHHHI" )
    
    def __init__(self, *args):
        self.nameRaw = [0]*11
        self.attributes = 0 #byte
        self.reserved=0     #byte
        self.creationTimeSecondsTenths = 0  #byte 0...199: when divided by two, we get the tenths
        self.creationTimeRaw = 0    #ushort HHHH HMMM MMMS SSSS seconds needs to be mult by 2 and added to prev field
        self.creationDateRaw=0      #ushort #YYYY YYYM MMMD DDDD
        self.lastAccessDateRaw=0    #ushort
        self.clusterHigh=0          #ushort
        self.lastModifiedTimeRaw=0  #ushort
        self.lastModifiedDateRaw=0  #ushort
        self.clusterLow=0           #ushort
        self.size=0                 #uint



        if len(args) == 0:
            pass
        elif len(args) == 2 and type(args[0]) == str:
            nm,attr = args
            self.name = nm        
            self.attributes = attr
            self.reserved = 0
            now = datetime.datetime.now()
            fakeDate = os.getenv("FOOL_NOW",None)
            if fakeDate != None:
                now = datetime.strptime(fakeDate, "%Y-%b-%d %H:%M:%S")
            self.created = now
            self.lastAccessed = now
            self.lastModified = now
        elif len(args) == 2:
            b,idx = args
            self.nameRaw = array.array("B",b[idx:idx+11])
            idx += 11
            self.attributes = b[idx]
            idx+=1
            self.reserved = b[idx]
            idx+=1
            self.creationTimeSecondsTenths = b[idx]
            idx+=1
            self.creationTimeRaw = (b[idx] | (b[idx + 1] << 8)) 
            idx += 2
            self.creationDateRaw = (b[idx] | (b[idx + 1] << 8)) 
            idx += 2
            self.lastAccessDateRaw = (b[idx] | (b[idx + 1] << 8)) 
            idx += 2
            self.clusterHigh = (b[idx] | (b[idx + 1] << 8)) 
            idx += 2
            self.lastModifiedTimeRaw = (b[idx] | (b[idx + 1] << 8)) 
            idx += 2
            self.lastModifiedDateRaw = (b[idx] | (b[idx + 1] << 8)) 
            idx += 2
            self.clusterLow = (b[idx] | (b[idx + 1] << 8)) 
            idx += 2
            self.size = (b[idx] | (b[idx + 1] << 8) | (b[idx + 2] << 16) | (b[idx + 3] << 24))

    @staticmethod
    def isLegal(value):
    
        #special case
        if(value == "." or value == ".."):
            return True

        if len(value) == 1:
            return value[0] in ShortDirEntry.legal
        else:
            
            if len(value) == 0:
                return False
                
            #capital letters, numbers, `~!@#$%^&'()-_{}
            for c in value:
                if c not in ShortDirEntry.legal:
                    return False
                    
            b=""
            e=""
            lst = value.split(".")
            if len(lst) > 2 or len(lst) < 1:
                return False
                
            b = lst[0]
            if len(lst) > 1:
                e=lst[1]
            
            if len(b) < 1 or len(b) > 8:
                return False 
            if len(e) > 3:
                return False
            return True

    @property
    def name(self):
        b = ""
        #DOS allows spaces as long as they are
        #not trailing spaces, but
        #we forbid them here...
        #FIXME: Should we change this?
        for i in range(8):
            if self.nameRaw[i] == 32:
                break
            b += chr(self.nameRaw[i])
        
        e = ""
        for i in range(8,11):
            if self.nameRaw[i] == 32:
                break
            e += chr(self.nameRaw[i])
        
        if len(e) > 0:
            return b+"."+e
        else:
            return b
    
    @name.setter
    def name(self,value):
        b=""
        e=""
        #special cases
        if value == ".":
            b = ".       "
            e = "   "
        elif value == "..":
            b = "..      "
            e = "   "
        else:
            if not ShortDirEntry.isLegal(value):
                raise RuntimeError("Bad short filename")
            lst = value.split(".")
            b = lst[0]
            if len(lst) == 2:
                e=lst[1]
            else:
                e=""
        self.nameRaw = array.array("B",[32]*11)
        for i in range(len(b)):
            self.nameRaw[i] = ord(b[i])
        for i in range(len(e)):
            self.nameRaw[i+8] = ord(e[i])
            
    @property
    def isDirectory(self):
        return (self.attributes & self.DIRECTORY) != 0

    @property
    def isLabel(self):
        return (self.attributes & self.VOLUME) != 0
    @property
    def isFile(self):
        return (not self.isDirectory) and (not self.isLabel)

    @staticmethod
    def unparseDate( d ): #out ushort date, out ushort time, out byte deciseconds
        year = d.year-1980
        month = d.month 
        day = d.day
        hr = d.hour
        min = d.minute
        sec = d.second//2
        msec = d.microsecond//1000
        tsec = ((d.second % 2 ) * 1000 + msec) // 200
        deciseconds = tsec
        time = ((hr << 11) | (min << 5) | (sec))
        date = ((year << 9) | (month << 5) | day)
        return date,time,deciseconds
    
    @property
    def created(self):
        return ShortDirEntry.parseDate(self.creationDateRaw,
            self.creationTimeRaw,self.creationTimeSecondsTenths)
    
    @created.setter
    def created(self,value):
        self.creationDateRaw, self.creationTimeRaw, self.creationTimeSecondsTenths = ShortDirEntry.unparseDate(value)
    
    @property
    def lastAccessed(self):
        return self.parseDate(self.lastAccessDateRaw, 0,0)
    
    @lastAccessed.setter
    def lastAccessed(self,value):
        self.lastAccessDateRaw, _, __ = self.unparseDate(value)
    
    @property
    def lastModified(self):
        return ShortDirEntry.parseDate(self.lastModifiedDateRaw,self.lastModifiedTimeRaw,0)
        
    @lastModified.setter
    def lastModified(self,value):
        self.lastModifiedDateRaw, self.lastModifiedTimeRaw, _ = ShortDirEntry.unparseDate(value)

    @property
    def firstCluster(self):
        return (self.clusterLow | (self.clusterHigh << 16))
        
    @firstCluster.setter
    def firstCluster(self,value):
        self.clusterLow = (value & 0xffff)
        self.clusterHigh = (value >> 16)

    @staticmethod
    def parseDate(d,t,tenmsec):
        year = (d >> 9) + 1980
        month = ((d >> 5) & 0xf) 
        day = (d & 0x1f)

        hour = ((t >> 11) & 0x1f)
        minute = (t >> 5) & 0x3f
        seci = t & 0x1f
        seci *= 2
        secf = seci + tenmsec * 0.01
        
        seconds = int(secf)
        millisec = int( (secf-seconds)*1000 )
        #round to nearest quarter second
        millisec = int(millisec//250)
        millisec *= 250
        return datetime.datetime( year=year, month=month, 
            day=day, hour=hour, 
            minute=minute, second=seconds, 
            microsecond=millisec*1000 )

  
    @staticmethod
    def getHeader():
        return "{0:8} {1:3} {4:5} {2:>7} {3:7} {5:<22} ".format(
            "Base",
            "Ext",
            "Size",
            "Cluster",
            "",
            "Last Modified",
            "YY",
            "ZZ"
        )
        #return "Base     Ext         Size Cluster Modified               "
    
    def __repr__(self):
        return str(self)
    
    def __str__(self):
        bse = ""
        ext = ""
        for i in range(8):
            bse += chr(self.nameRaw[i])
        for i in range(8,11):
            ext += chr(self.nameRaw[i])

        #          0=base, 1=ext, 2=size, 3=cluster, 4=attr
        #          5=created, 7=checksum
        
        attr=""
        if self.attributes & self.DIRECTORY:
            attr="<DIR>"
            
        return "{0:8} {1:3} {4:5} {2:7,d} {3:7,d} {5:<22}".format(
            bse, 
            ext, 
            self.size, 
            self.clusterHigh << 16 | self.clusterLow, 
            attr,
            str(self.created),
            str(self.lastModified),
            LFNEntry.computeFilenameChecksum(bse+ext)
        )

    def toBytes(self):
        A= (*self.nameRaw.tobytes(), self.attributes,0,
            self.creationTimeSecondsTenths,
            self.creationTimeRaw, self.creationDateRaw, self.lastAccessDateRaw,
            self.clusterHigh, self.lastModifiedTimeRaw, self.lastModifiedDateRaw,
            self.clusterLow, self.size)
        b = ShortDirEntry.S.pack( *A )
        assert len(b) == 32
        return b
         
    def markAsDeleted(self):
        self.nameRaw[0] = 0xe5





class LFNEntry:
    @property
    def deleted(self):
        return  (self.sequenceNumber & 0x80) == 0x80

    @property
    def last(self):
        return  (self.sequenceNumber & 0x40) == 0x40

    @property
    def seq(self):
        return self.sequenceNumber & 0x3f


    S = struct.Struct( "B10BBBB12BH4B" )

    def __init__(self,*args):
    
        #26 bytes of filename = 13 chars
        #high bit = deleted?, next bit = last?, next bits = number. Stored in reverse order
        # DL000000
        self.sequenceNumber = 0 #byte
        self.name0 = [0]*10  #5 chars, 10 bytes
        self.attribute = 15  #byte: always 15
        self.zero = 0  #byte
        self.checksum = 0 #byte
        self.name1 = [0]*12 #6 chars, 12 bytes
        self.alsozero = 0 #short
        self.name2 = [0]*4    #2 chars, 4 bytes
        #Total = 13 chars
        
        if len(args) == 2:
            b=args[0]
            idx=args[1]
            self.sequenceNumber = b[idx]
            idx+=1
            self.name0 = b[idx:idx+10]
            idx += 10;
            self.attribute = b[idx]
            idx+=1
            self.zero = b[idx]
            idx+=1
            self.checksum = b[idx]
            idx += 1
            self.name1 = b[idx:idx+12]
            idx += 12
            self.alsozero = b[idx]
            idx += 1
            self.alsozero |= (b[idx] << 8)
            idx += 1
            self.name2 = b[idx:idx+4]
            idx += 4
        elif len(args) == 5:
            seq,deleted,last,longnamepiece,csum = args
            if len(longnamepiece) > 13:
                raise RuntimeError("Bad long name piece: length={} value={}".format(
                    len(longnamepiece), longnamepiece) )
                    
            b = longnamepiece.encode("UTF-16LE")
            if len(b) > 26:
                raise RuntimeError("Bad long name piece 2: length={} value={}".format(
                    len(b), b) )
            b2 = [0]*26
            b2[0:len(b)] = b
            if( len(b) < len(b2) ):
                b2[len(b)] = 0
                b2[len(b) + 1] = 0
                for i in range(len(b)+2,len(b2)):
                    b2[i] = 0xff
        
            self.sequenceNumber = seq
            if deleted:
                self.sequenceNumber |= 0x80
            if last:
                self.sequenceNumber |= 0x40
            self.checksum = csum
            self.zero = 0
            self.alsozero = 0
            self.attribute = 0xf
            self.name0 = b2[0:len(self.name0)]
            self.name1 = b2[len(self.name0):len(self.name0)+len(self.name1)]
            self.name2 = b2[len(self.name0)+len(self.name1):len(self.name0)+len(self.name1)+len(self.name2)]
        else:
            assert 0

    @staticmethod
    def  makeEntries( longname, shortname):
        shortnamebase=""
        shortnameext=""
        idx = shortname.find('.');
        if(idx == -1):
            shortnamebase = shortname
            shortnameext = ""
        else:
            shortnamebase = shortname[0:idx]
            shortnameext = shortname[idx+1:]

        if len(shortnamebase) > 8:
            raise RuntimeError("Bad short name: "+str(shortnamebase))
        if len(shortnameext) > 3:
            raise RuntimeError("Bad short ext: "+str(shortnameext))
        while len(shortnamebase) < 8:
            shortnamebase += " "
            
        while len(shortnameext)  < 3:
            shortnameext += " "
            
        x = shortnamebase + shortnameext
        csum = LFNEntry.computeFilenameChecksum(x)

        pieces = []
        seq = 1;
        for i in range(0,len(longname),13):
            s = longname[i:i+13]
            ok, reason = LFNEntry.isLegal(s)
            if not ok:
                raise RuntimeError("Bad long name \""+s+"\": "+reason)
            pieces.append(LFNEntry(
                seq, 
                False,
                (i + 13) >= len(longname),
                s,
                csum))
            seq+=1
        pieces = list(reversed(pieces))
        return pieces

    legal = "+=[];,abcdefghijklmnopqrstuvwxyz "

    @staticmethod
    def isLegal(s):
        #LFN's also allow +=[];,.  and lowercase
        for c in s:
            if c not in ShortDirEntry.legal and c not in LFNEntry.legal:
                return False, "Character '" + c + "' is not valid"
        return True,""

    @staticmethod
    def computeFilenameChecksum(shortname):
        sum = 0
        for i in range(len(shortname)):
            low = sum & 1
            sum >>= 1
            if(low != 0):
                sum |= 0x80
            sum += ord(shortname[i])
            sum &= 0xff

        return sum & 0xff;

    def __repr__(self):
        return str(self)
        
    def __str__(self):
        b = self.name0 + self.name1 + self.name2
        j = len(b)
        for i in range(0,len(b),2):
            if( (b[i] == 0 and b[i + 1] == 0) or (b[i] == 0xff and b[i+1] == 0xff)):
                j = i
                break
        s = bytes(b[0:j]).decode("utf-16")
        return s   #">"+s+"("+j+f+")<";

    def toBytes(self):
        return LFNEntry.S.pack( self.sequenceNumber, *self.name0, self.attribute,
            self.zero, self.checksum, *self.name1, self.alsozero, *self.name2 )

    def markAsDeleted(self):
        self.sequenceNumber = 0xe5;





class DirEntry:
    
        
    @property 
    def firstCluster(self):
        return self.shortentry.firstCluster
        
    @firstCluster.setter
    def firstCluster(self,val):
        self.shortentry.firstCluster = val
        
    @staticmethod
    def shortNameExists(L,sn):
        #L = List of DirEntry
        for de in L:
            if de.shortentry.name == sn:
                return True
        return False

    def __init__(self, *args):
        self.isRoot = True
        
        #list of LFNEntry's
        #stored in order they appear on the disk, so first 
        #characters of filename are in last lfn entry
        self.lfn=[]
        
        if len(args) == 0:
            self.shortentry = ShortDirEntry()
        elif len(args) == 3:
            name, attr, existingEntries = args

            if name == "":
                raise RuntimeError("Bad name: Cannot be empty");

            #if the name matches any existing one, flag an error
            for d in existingEntries:
                if(d.nameMatches(name)):
                    raise RuntimeError("Filename already exists");

            #if the original name is a legal short name,
            #don't create any lfn's
            onlyshort = ShortDirEntry.isLegal(name);
            if onlyshort:
                self.shortentry = ShortDirEntry(name, attr)
                return

            #if the original name uppercased is a legal short name,
            #use that as the short name
            if ShortDirEntry.isLegal(name.upper()):
                self.shortentry = ShortDirEntry(name.upper(), attr)
            else:
                tmp=""
                for c in name.upper():
                    if(c == ' '):
                        pass
                    elif not ShortDirEntry.isLegal(c):
                        tmp += "~"
                    else:
                        tmp += c

                if tmp == "":
                    tmp = "~"
                
                parts = tmp.split(".")
                pre = parts[0]
                ext=""
                if len(parts) == 1:
                    ext = "";
                else:
                    ext = parts[-1]
                    
                if len(ext) > 3:
                    ext = ext[0:3]
                    
                ok=False
                for i in range(1,99999):
                    suffix = "~" + str(i)
                    keep = 8 - len(suffix)
                    basen = ""
                    if keep >= len(pre):
                        basen = pre + suffix
                    else:
                        basen = pre[:keep]+suffix
                    proposed = basen;
                    if len(ext) > 0:
                        proposed += "." + ext
                    if not self.shortNameExists(existingEntries, proposed):
                        self.shortentry = ShortDirEntry(proposed, attr)
                        ok = True
                        break
                if not ok:
                    raise RuntimeError("Cannot make short name")
            
            self.lfn = LFNEntry.makeEntries(name, self.shortentry.name)
        elif len(args) == 2:
            b, idxRef = args
            assert type(idxRef) == list
            idx = idxRef[0]
            try:
                while True:
                    if  idx >= len(b):
                        raise RuntimeError("Early end of directory data");
                    
                    if(b[idx] == 0xe5):
                        #deleted
                        idx += 32;
                        continue
                    
                    attr = b[idx + 11];
                    if attr == 0xf:
                        #this is a long filename
                        tmp = LFNEntry(b, idx)
                        idx += 32;
                        if not tmp.deleted:
                            #lfn deleted flag: When does this ever get used?
                            self.lfn.append(tmp)
                    else:
                        self.shortentry = ShortDirEntry(b, idx)
                        #print(idx,"->",self.shortentry)
                        idx += 32
                        return 
            finally:
                idxRef[0] = idx
        else:
            assert 0
        
        
        
    #pull the first direntry from the byte array b. Return the dir entry
    #as well as the first ununsed byte's index
    @staticmethod
    def make(b, idx):
        while idx < len(b):
            if b[idx] == 0:
                return None,idx
            elif b[idx] == 0xe5:  
                #deleted
                idx += 32       #size of dir entry
            else:
                idxRef = [idx]
                de = DirEntry(b,idxRef)
                idx = idxRef[0]
                return de,idx
                
        return None,idx
     
    @property
    def longname(self):
        if len(self.lfn) == 0:
            return self.shortentry.name
        else:
            L = []
            for q in reversed(self.lfn):
                L.append(str(q))
            return "".join(L)

    @staticmethod
    def getHeader():
        return ShortDirEntry.getHeader() + " " + "Long name"
    
    def __repr__(self):
        return str(self)
        
    def __str__(self):
        return str(self.shortentry) + "  " + self.longname;

    def nameMatches(self,s):
        s = s.upper()
        if self.shortentry.name == s:
            return True;
        if  self.longname.upper() == s:
            return True;
        return False;

    def toBytes(self):
        rv=[]
        for l in self.lfn:
            rv += l.toBytes()
        rv += self.shortentry.toBytes()
        return rv

    def markAsDeleted(self):
        for le in self.lfn:
            le.markAsDeleted()
        self.shortentry.markAsDeleted()


class InfoSector:
    S = struct.Struct( "<4B480b4B1I1I12B4B" )
    def __init__(self):
        self.sig = [ 0x52, 0x52, 0x61, 0x41 ]     #RRaA
        self.reserved = [0]*480 #all zero
        self.sig2 = [ 0x72,0x72,0x41,0x61]  #rrAa
        self.numFreeClusters=0xffffffff    #-1 if not known
        self.mostRecentlyAllocatedCluster=0xffffffff   #-1 if not known
        self.reserved2 = [0]*12     #all zero
        self.sig3 = [0,0,0x55,0xaa]   #0,0,0x55,0xaa
        
    def toBytes(self):
        tmp = InfoSector.S.pack( *self.sig, *self.reserved, *self.sig2, self.numFreeClusters,
            self.mostRecentlyAllocatedCluster, *self.reserved2, *self.sig3 )
        assert len(tmp) == 512
        return tmp
        
    def write(self,fs,vbr):
        Utils.writeSector( fs, vbr.first_sector + vbr.fsinfo_sector, self.toBytes() )

class VBR_(ctypes.Structure):
    _pack_=1
    _fields_ = [
        ("jmp",ctypes.c_ubyte*3),
        ("oem",ctypes.c_ubyte*8),
        ("bytes_per_sector", ctypes.c_ushort),
        ("sectors_per_cluster", ctypes.c_ubyte),
        ("reserved_sectors", ctypes.c_ushort), 
        ("num_fats" , ctypes.c_ubyte  ),
        ("num_root_dir_entries" , ctypes.c_ushort     ),
        ("num_sectors_small" , ctypes.c_ushort     ),
        ("id" , ctypes.c_ubyte     ),
        ("sectors_per_fat_12_16" , ctypes.c_ushort     ),
        ("sectors_per_track" , ctypes. c_ushort    ),
        ("num_heads" , ctypes. c_ushort    ),
        ("first_sector" , ctypes.c_uint     ),
        ("num_sectors_big" , ctypes.c_uint     ),
        ("sectors_per_fat_32" , ctypes.c_uint     ),
        ("flags" , ctypes.c_ushort     ),
        ("version" , ctypes.c_ushort     ),
        ("root_cluster" , ctypes.c_uint     ),
        ("fsinfo_sector" , ctypes.c_ushort     ),
        ("backup_boot_sector" , ctypes.c_ushort     ),
        ("reservedField" , ctypes.c_ubyte*12     ),
        ("drive_number" , ctypes.c_ubyte     ),
        ("flags2" , ctypes.c_ubyte     ),
        ("signature" , ctypes.c_ubyte     ),
        ("serial_number" , ctypes.c_uint     ),
        ("label" , ctypes.c_ubyte*11     ),
        ("identifier" , ctypes.c_ubyte*8     ),
        ("code" , ctypes.c_ubyte*420     ),
        ("checksum" , ctypes.c_ushort     )
    ]
    
class VBR:
    #S = struct.Struct( "<3B8BHBHBHHBHHHIIIHHIHH12BBBBI11B8B420BH" )
    
    def __init__(self, *args):
        assert ctypes.sizeof(VBR_) == 512
        
        self.V = VBR_()
        
        #jmp short dest , nop
        self.V.jmp[0] = 0xeb    #jmp
        self.V.jmp[1] = 0x58    #offset
        self.V.jmp[2] = 0x90    #nop
        for i,v in enumerate([ 69, 84, 69, 67, 51, 55, 48, 49 ] ): #ETEC3701
            self.V.oem[i] = v
        self.V.bytes_per_sector = 512
        self.V.sectors_per_cluster = 8    #always 4KB
        #wikipedia says fat32 usually uses 32 man page for vfat says must be >=2, default is 32
        self.V.reserved_sectors = 32  
        self.V.num_fats = 2
        self.V.num_root_dir_entries = 0   #not used on fat32
        self.V.num_sectors_small = 0    #only used if disk size < 32MB
        self.V.id = 0xf8  #media descriptor
        self.V.sectors_per_fat_12_16 = 0    #only used for fat 12 or fat 16
        self.V.sectors_per_track = 32
        self.V.num_heads = 64
        self.V.first_sector = 0       #FIXME: Should we add a partition table?
        self.V.num_sectors_big = 0

        #fat32
        self.V.sectors_per_fat_32 = 0
        self.V.flags = 0        #should be zero
        self.V.version = 0
        self.V.root_cluster = 2
        self.V.fsinfo_sector = 1    #usually right after vbr: Relative sector number
        self.V.backup_boot_sector = 2   #must be within reserved_sectors (vbr_sectors)
        for i in range(12):
            self.V.reservedField[i]=0
        self.V.drive_number = 0x80
        self.V.flags2 = 0
        self.V.signature = 0x28     #0x28 or 0x29
        self.V.serial_number = 0x12345678
        for i,v in enumerate([ 77, 79, 79, 67, 79, 87, 49, 50, 51, 52, 53 ]): #MOOCOW12345
            self.V.label[i]=v
            
        for i,v in enumerate([ 70, 65, 84, 51, 50, 32, 32, 32 ]):  #FAT32(sp)(sp)(sp)
            self.V.identifier[i] = v
        for i in range(420):
            self.V.code[i]=0
        self.V.checksum = 0xaa55   #0xaa55
    
        if len(args) == 1:
            b = args[0]
            if(len(b) != 512):
                raise RuntimeError("Not 512 bytes")
            self.V = VBR_.from_buffer_copy(b)
            # ~ (self.jmp, self.oem, self.bytes_per_sector, self.sectors_per_cluster,
             # ~ self.reserved_sectors, self.num_fats, self.num_root_dir_entries,
             # ~ self.num_sectors_small, self.id, self.sectors_per_fat_12_16,
             # ~ self.sectors_per_track, self.num_heads, self.first_sector,
             # ~ self.num_sectors_big, self.sectors_per_fat_32, self.flags,
             # ~ self.version, self.root_cluster, self.fsinfo_sector, self.backup_boot_sector, 
             # ~ self.reservedField, self.drive_number, self.flags2, self.signature,
             # ~ self.serial_number, self.label, self.identifier, self.code, self.checksum) = b
        elif len(args) == 2:
            partitionStartBytes,partitionSizeBytes = args
            self.V.first_sector = partitionStartBytes // 512
            self.V.num_sectors_big = (partitionSizeBytes // self.bytes_per_cluster * self.bytes_per_cluster // 512 )
            if self.V.num_sectors_big == 0:
                raise RuntimeError("Drive is too small")
            #how many clusters does one sector of FAT keep track of?
            clustersPerFatSector = 512//4
            nc = self.V.num_sectors_big // self.sectors_per_cluster
            self.V.sectors_per_fat_32 = nc // clustersPerFatSector 
            if(nc % clustersPerFatSector != 0):
                self.V.sectors_per_fat_32+=1
        else:
            assert 0
    
        
    @property
    def fat_start(self):
        return self.first_sector + self.reserved_sectors

    @property
    def data_start(self):
        return self.fat_start + self.num_fats * self.sectors_per_fat_32

    @property
    def  bytes_per_cluster(self):
        return (self.sectors_per_cluster * 512)

    @property
    def num_sectors(self):
        if self.num_sectors_small == 0:
            return self.num_sectors_big
        else:
            return self.num_sectors_small

    @property
    def num_data_sectors(self):
        return self.num_sectors - self.reserved_sectors - self.num_fats * self.sectors_per_fat_32

    @property
    def num_clusters(self):
        return self.num_data_sectors // self.sectors_per_cluster 
     
    def toBytes(self):
        p = ctypes.pointer(self.V)
        b = ctypes.string_at(p,512)
        assert len(b) == 512
        return b
         
    def __repr__(self):
        return str(self)
        
    def __str__(self):
        L=[]
        
        def wr(L,cap,b):
            def X(b):
                s=""
                for x in b:
                    s += chr(x)
                L.append(cap+": "+s)
                
            if type(b) == list or type(b) == bytes or type(b) == bytearray:
                X(b)
            elif type(b) == int:
                L.append( cap+": "+str(b)+" = "+hex(b) )
            else:
                p = ctypes.pointer(b)
                X(ctypes.string_at(p,ctypes.sizeof(b)))
                
        wr(L,"OEM", self.oem)
        wr(L,"Bytes per sector", self.bytes_per_sector)
        wr(L,"Sectors per cluster", self.sectors_per_cluster)
        wr(L,"Reserved sectors", self.reserved_sectors)
        wr(L, "Num FATs", self.num_fats)
        wr(L, "Num root directory entries (only for FAT 12/16)", self.num_root_dir_entries)
        wr(L, "Num sectors (only for disks <32MB)", self.num_sectors_small)
        wr(L, "ID", self.id)
        wr(L, "Sectors per FAT (only for FAT 12/16)", self.sectors_per_fat_12_16)
        wr(L, "Sectors per track", self.sectors_per_track)
        wr(L, "Num heads", self.num_heads)
        wr(L, "First sector", self.first_sector)
        wr(L, "Num sectors (only for disks >= 32MB)", self.num_sectors_big)
        wr(L, "Sectors per FAT (only for FAT 32)", self.sectors_per_fat_32)
        wr(L, "Flags", self.flags)
        wr(L, "Version", self.version)
        wr(L, "Root directory cluster (only for FAT 32)", self.root_cluster)
        wr(L, "FS Info sector", self.fsinfo_sector)
        wr(L, "Backup VBR", self.backup_boot_sector)
        wr(L, "Drive number", self.drive_number)
        wr(L, "Flags 2", self.flags2)
        wr(L, "Signature", self.signature)
        wr(L, "Serial number", self.serial_number)
        wr(L, "Label", self.label)
        wr(L, "Identifier", self.identifier)
        wr(L, "Checksum", self.checksum)

        L.append("Computed values:")
        L.append( "Disk size: {} bytes".format(self.num_sectors_big*512))
        wr(L, "FAT start sector", self.fat_start)
        wr(L, "Data start sector", self.data_start)
        wr(L, "Bytes per cluster", self.bytes_per_cluster)
        L.append( "Num data sectors: {} = {} bytes".format(
            self.num_data_sectors,
            self.num_data_sectors*self.bytes_per_sector))
        L.append( "Num data clusters: {} = {} bytes".format(
            self.num_clusters,
            self.num_clusters * self.bytes_per_cluster))
        L.append( "FAT capacity: {} entries".format( self.sectors_per_fat_32 * (512 // 4) ))
        L.append( "Num excess FAT entries: {}".format(self.sectors_per_fat_32 * (512 // 4) - self.num_clusters))
        return "\n".join(L)


    @property
    def jmp(self):
        return self.V.jmp

    @property
    def oem(self):
        return self.V.oem

    @property
    def bytes_per_sector(self):
        return self.V.bytes_per_sector

    @property
    def sectors_per_cluster(self):
        return self.V.sectors_per_cluster

    @property
    def reserved_sectors(self):
        return self.V.reserved_sectors

    @property
    def num_fats(self):
        return self.V.num_fats

    @property
    def num_root_dir_entries(self):
        return self.V.num_root_dir_entries

    @property
    def num_sectors_small(self):
        return self.V.num_sectors_small

    @property
    def id(self):
        return self.V.id

    @property
    def sectors_per_fat_12_16(self):
        return self.V.sectors_per_fat_12_16

    @property
    def sectors_per_track(self):
        return self.V.sectors_per_track

    @property
    def num_heads(self):
        return self.V.num_heads

    @property
    def first_sector(self):
        return self.V.first_sector

    @property
    def num_sectors_big(self):
        return self.V.num_sectors_big

    @property
    def sectors_per_fat_32(self):
        return self.V.sectors_per_fat_32

    @property
    def flags(self):
        return self.V.flags

    @property
    def version(self):
        return self.V.version

    @property
    def root_cluster(self):
        return self.V.root_cluster

    @property
    def fsinfo_sector(self):
        return self.V.fsinfo_sector

    @property
    def backup_boot_sector(self):
        return self.V.backup_boot_sector

    @property
    def reservedField(self):
        return self.V.reservedField

    @property
    def drive_number(self):
        return self.V.drive_number

    @property
    def flags2(self):
        return self.V.flags2

    @property
    def signature(self):
        return self.V.signature

    @property
    def serial_number(self):
        return self.V.serial_number

    @property
    def label(self):
        return self.V.label

    @property
    def identifier(self):
        return self.V.identifier

    @property
    def code(self):
        return self.V.code

    @property
    def checksum(self):
        return self.V.checksum

            

class DirEntryList:
    def __init__(self):
        self.dents=[]
        
    def append(self,de):
        assert type(de) == DirEntry
        self.dents.append(de)

    def __iter__(self):
        return self.dents.__iter__()

    def __len__(self):
        return len(self.dents)
        
    def __getitem__(self,idx):
        return self.dents[idx]
    def __setitem__(self,idx,value):
        self.dents[idx]=value
        
    def toBytes(self,cluster_size):
        L = []
        for de in self.dents:
            L += de.toBytes()
        while len(L) % cluster_size != 0 :
            L.append(0)
        
        return array.array("B", L )

class Utils:

    randSeed = 42
    
    @staticmethod
    def randrange(min, max):
        Utils.randSeed ^= (Utils.randSeed<<13)
        Utils.randSeed ^= (Utils.randSeed>>17)
        Utils.randSeed ^= (Utils.randSeed<<15)
        pct = (Utils.randSeed & 0x7fffffff)/(0x7fffffff)
        v = int(min + pct * (max - min))
        if(v < min):
            v = min
        elif(v >= max):
            v = max-1
        return v

    @staticmethod
    def shuffle(L1):
        L=L1[:]
        for i in range(len(L)):
            j = Utils.randrange(0, len(L))
            tmp = L[i]
            L[i] = L[j]
            L[j] = tmp
        return L
        
    @staticmethod
    def bytesFromString(expectedSizeInBytes, s, sixteenbit):
        sdata = []
        if(sixteenbit):
            sdata = s.encode("utf16_le")
        else:
            sdata = s.encode("ascii")
        if len(sdata) != expectedSizeInBytes:
            raise RuntimeError("String size mismatch")
        return array.array("B",sdata)
    
    @staticmethod
    def writeSector(fs, secnum, data):
        if type(data) == array.array:
            tmp = data.tobytes()
        elif type(data) == bytes:
            tmp = data
        elif type(data) == bytearray:
            tmp = data
        elif type(data) == list:
            tmp = bytes(data)
        else:
            print(type(data))
            assert 0
         
        fs.seek(secnum*512,0)
        if len(data) != 512:
            raise RuntimeError("len(data)="+str(len(data))+" but should be 512")
        fs.write(tmp)
         
    @staticmethod
    def readSector(fs, secnum):
        fs.seek(secnum*512, 0)
        b = fs.read(512)
        return b

    @staticmethod
    def readIntArrayFromSector(fs, sector, numElements):
        assert numElements == 512//4
        fs.seek(sector*512, 0)
        ba = fs.read(512)
        ia = array.array(numElements)
        ia.frombytes(ba)
        return ia

    @staticmethod
    def stringFromBytes(bp, sixteenbit):
        if(sixteenbit):
            count = len(bp)
            for i in range(0,len(bp),2):
                if(bp[i] == 0 and bp[i + 1] == 0):
                    count = i
                    break
            return bp[0:count].decode("utf-16")
        else:
            count = len(bp)
            for i in range(len(bp)):
                if(bp[i] == 0):
                    count = i
                    break
            return bp[0:count].decode("ascii")
 
bootblock = b'\xebX\x90\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfa\xfcf\xbc\x00|\x00\x00\xb8\x01\xe8\xcd\x15\x89\x1e\x93|\xe83\x00j\x1fh\x00~\x00\x00j\x01\xe8M\x00\x00\x00\x83\xc4\x0ch\x95|\x00\x00\xe8\xef\x00\x00\x00\x83\xc4\x04\xb8\x00\x82\x00\x00\xff\xe0\x00\x00VBR loaded\n\x00Xj\x00P\x0f\x01\x16\xc7}\x0f \xc0f\x83\xc8\x01\x0f"\xc0\xeb\x00\x90\xb8\x08\x00\x8e\xd0\x8e\xd8\x8e\xc0f\xea\xc8|\x00\x00\x10\x00\xc3`\x8b\\$,\x8b|$(\x8bt$$WV\xe8\x0f\x00\x00\x00\x83\xc4\x08\x81\xc7\x00\x02\x00\x00FKu\xeca\xc3`\x8bt$$\x8b|$(f\xba\xf7\x01\xe8k\x00\x00\x00fJ\x89\xf0\xc1\xe8\x18\x0c\xe0\xee\xe8b\x00\x00\x00f\xba\xf6\x03\xb0\x02\xeef\xba\xf2\x01\xb0\x01\xeefB\x89\xf0\xee\xc1\xe8\x08fB\xee\xc1\xe8\x08fB\xee\xc1\xe8\x08fBfB\xb0 \xee\xe8.\x00\x00\x00\xa8\x08u\x10\xa8!t\xf8h\xe5}\x00\x00\xe8+\x00\x00\x00\xebuf\xb9\x00\x01f\xba\xf0\x01f\xedf\x89\x07GGfIu\xf5\xe8\x08\x00\x00\x00a\xc3\xec\xa8\x80u\xfb\xc3f\xba\xf7\x01\xec\xec\xec\xec\xc3`\x8bD$$\x8b\r\xbc}\x00\x00\x8a\x10\x80\xfa\x00t*\x80\xfa\nu\x1b\xff\x05\xc0}\x00\x00\x8b\r\xc0}\x00\x00i\xc9\xa0\x00\x00\x00\x81\xc1\x00\x80\x0b\x00@\xeb\xd9\x88\x11A\xc6\x01\xf0A@\xeb\xcf\x89\r\xbc}\x00\x00a\xc3\x00\x80\x0b\x00\x00\x00\x00\x00\xf4\xeb\xfd\x18\x00\xcd}\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x92\xcf\x00\xff\xff\x00\x00\x00\x9a\xcf\x00Disk error \x00\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90U\xaaRRaA\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90rrAa\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00U\xaa\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90hp\x87\x00\x00\xe8n\xfb\xff\xff\x83\xc4\x04\xe8\xe1\x03\x00\x00h\x7f\x87\x00\x00\xe8\\\xfb\xff\xff\x83\xc4\x04\xe8\x02\x04\x00\x00f\xa1\x14\x00\x10\x00\xc1\xe0\x10f\xa1\x1a\x00\x10\x00\x83\xf8\x00u\x12h\x97\x87\x00\x00\xe86\xfb\xff\xff\x83\xc4\x04\xe9z\xfb\xff\xffhV\x87\x00\x00\xe8$\xfb\xff\xff\x83\xc4\x04P\xe8\'\x01\x00\x00\x83\xc4\x04P\xe8r\x01\x00\x00\x83\xc4\x04h\x8c\x87\x00\x00\xe8\x05\xfb\xff\xff\x83\xc4\x04P\xe8\x08\x01\x00\x00\xe8d\x03\x00\x00\x83\xc4\x04h\xac\x87\x00\x00\xe8\xea\xfa\xff\xff\x83\xc4\x04\x8b\x1d\x1c\x00\x10\x00S\xe8\xe7\x00\x00\x00\x83\xc4\x04\xf7\xc3\xff\x01\x00\x00t\x06\x81\xc3\x00\x02\x00\x00\xc1\xeb\th\xc0\x87\x00\x00\xe8\xbd\xfa\xff\xff\x83\xc4\x04S\xe8\xc0\x00\x00\x00\xe8\x1c\x03\x00\x00\x83\xc4\x04Sh\x00\x00\x10\x00P\xe8\xf1\xf9\xff\xff\x83\xc4\x0cj\x10hX\x02\x00\x00h \x03\x00\x00\xe8\x8a\x01\x00\x00\x83\xc4\x0c\xa1\xec\x87\x00\x00\x8b\x1d\xf4\x87\x00\x00\xbaX\x02\x00\x00\xbe\xff\xff\x00\x00\xb9 \x03\x00\x00\x89\xc7\x897\x83\xc7\x04\x83\xe9\x02u\xf6\x01\xd8\xc1\xce\x10Ju\xe7\xc7\x05\xe0\x87\x00\x00\x01\x10\x00\x00\xc7\x05\xe4\x87\x00\x00\x00\x00\n\x001\xdbf\x8b\x1d\x93|\x00\x00\xc1\xe3\x10\x81\xc3\x00\x00\x00\x01\x81\xeb\x00\x00\x10\x00\x89\x1d\xe8\x87\x00\x001\xc0\x8e\xe0\x8e\xe81\xdb1\xc91\xd21\xf61\xff1\xedh\xe0\x87\x00\x00\xb8\x00\x00\x10\x00\xff\xe0\xe8\xea\x00\x00\x00h\x1a\x87\x00\x00\xe8\xfc\xf9\xff\xff\x83\xc4\x04\xe9@\xfa\xff\xff`\x8bD$$\x83\xf8\x00u\x16\xc6\x05\xd4\x83\x00\x000h\xd4\x83\x00\x00\xe8\xd9\xf9\xff\xff\x83\xc4\x04a\xc3j\xff\xbb\n\x00\x00\x001\xd2\xf7\xf3R\x83\xf8\x00u\xf6X\x83\xf8\xfft\x17\x83\xc00\xa2\xd4\x83\x00\x00h\xd4\x83\x00\x00\xe8\xab\xf9\xff\xff\x83\xc4\x04\xeb\xe3a\xc3\x00\x00\x00\x00\x8bD$\x04SR\x83\xe8\x021\xdb\x8a\x1d\r|\x00\x00\x0f\xaf\xc3\x03\x05\x1c|\x00\x001\xdbf\x8b\x1d\x0e|\x00\x00\x01\xd8\x03\x05$|\x00\x00\x03\x05$|\x00\x00Z[\xc3`\x1e\x06\x0f\x01\x15\xe6\x86\x00\x00\xea\x1d\x84\x00\x00\x10\x00\x0f \xc0$\xfe\x0f"\xc0\xeb\x00\x90\xea-\x84\x00\x001\xc0\x8e\xd0g\x8bD$@\x8e\xc0g\x8bD$<\x8e\xd8g\x8b|$8g\x8bL$4g\x8b\\$0g\x8bD$,\xcd\x10\xe8I\xf8\x07\x1fa\xc3`j\x00j\x00j\x00j\x00j\x03h\x02O\x00\x00\xe8\x9b\xff\xff\xff\x83\xc4\x18a\xc3`h\x00\x90\x00\x00j\x00j\x00j\x00j\x00h\x00O\x00\x00\xe8~\xff\xff\xff\x83\xc4\x18\x8b=\x0e\x00\t\x00f\x89\xfe\xc1\xef\x0c\x01\xfe1\xc9f\x8b\x0ef\x83\xf9\xff\x0f\x84%\x01\x00\x00h\x00\x80\x00\x00j\x00j\x00Qj\x00h\x01O\x00\x00\xe8H\xff\xff\xff\x83\xc4\x181\xc0f\xa1\x12\x00\x08\x00;D$$\x0f\x85\xf2\x00\x00\x001\xc0f\xa1\x14\x00\x08\x00;D$(\x0f\x85\xe0\x00\x00\x001\xc0\xa0\x19\x00\x08\x00;D$,\x0f\x85\xcf\x00\x00\x001\xc0f\xa1\x00\x00\x08\x00f\xa9@\x00\x0f\x85\xbd\x00\x00\x00f%\x99\x00f=\x99\x00\x0f\x85\xaf\x00\x00\x001\xc0\xa0\x1b\x00\x08\x00<\x06\x0f\x85\xa0\x00\x00\x00j\x00j\x00j\x00j\x001\xdbf\x8b\x1ef\x81\xcb\x00@Sh\x02O\x00\x00\xe8\xc4\xfe\xff\xff\x83\xc4\x18\xa1(\x00\x08\x00\xa3\xec\x87\x00\x001\xc0f\xa1\x10\x00\x08\x00\xa3\xf4\x87\x00\x00f\xa1\x12\x00\x08\x00\xa3\xf8\x87\x00\x00f\xa1\x14\x00\x08\x00\xa3\xfc\x87\x00\x001\xc0\xa0\x14\x00\x08\x00\xa2\x00\x88\x00\x001\xc0\xa0 \x00\x08\x00\xa2\x02\x88\x00\x00\xa0"\x00\x08\x00\xa2\x04\x88\x00\x00\xa0$\x00\x08\x00\xa2\x06\x88\x00\x00\xa0\x1f\x00\x08\x00\xa2\x03\x88\x00\x00\xa0!\x00\x08\x00\xa2\x05\x88\x00\x00\xa0#\x00\x08\x00\xa2\x07\x88\x00\x00\xc6\x05\x01\x88\x00\x00\x01a\xc3\x83\xc6\x02\xe9\xcc\xfe\xff\xffh\xec\x86\x00\x00\xe8\x9b\xf7\xff\xff\x83\xc4\x04\xe9\xdf\xf7\xff\xffh\xde\x87\x00\x00\xe8\x89\xf7\xff\xff\x83\xc4\x04\xc3`\xb8\x00z\x10\x00\xbb\x00z\x00\x00\xc7\x00#\x01\x00\x00\xc7\x03V\x04\x00\x00\x8b\x00\x8b\x1b9\xd8u\x12h\x07\x87\x00\x00\xe8\\\xf7\xff\xff\x83\xc4\x04\xe9\xa0\xf7\xff\xffa\xc3`\xa1,|\x00\x00P\xe8\xa6\xfd\xff\xff\x83\xc4\x04h\x00\x00\x10\x00P\xe8\xac\xf6\xff\xff\x83\xc4\x08\xa0\x0b\x00\x10\x00\xa8\x18t\x12h8\x87\x00\x00\xe8"\xf7\xff\xff\x83\xc4\x04\xe9f\xf7\xff\xffa\xc3Kernel start must be >= 65536\x00Load start past end of RAM\x00Kernel end past end of RAM\x00Bad multiboot video flags\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x92\x00\x00\xff\xff\x00\x00\x00\x9a\x00\x00\x18\x00\xce\x86\x00\x00No acceptable video modes \x00A20 line disabled \x00Kernel returned unexpectedly \x00kernel is not a regular file \x00Kernel starts at cluster \x00In VBR part 2\n\x00A20 line OK\n\x00 = sector \x00No kernel file found\x00Kernel size: Bytes=\x00  Sectors=\x00 Considering mode \x00\n\x00\x01\x10\x00\x00\x00\x00\n\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90U\xaa'


if __name__ == "__main__":
    args = sys.argv[1:]
    if len(args)==1 and args[0] == "--test":
        unittest.main(module="tests",argv=sys.argv[0:1],verbosity=2,failfast=True)
        #tests.test()
    try:
        go(args)
    except FException as e:
        print(e.message)
        sys.exit(1)
     
