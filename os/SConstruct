# to build:  scons
# to clean: scons -c

#example of overriding file locations:
#env CC=arm-none-eabi-gcc LD=arm-none-eabi-ld QEMU=qemu-system-arm OBJCOPY=arm-none-eabi-objcopy /usr/local/scons-3.1.2/scons.py

import os
import subprocess
import sys
import os.path
foolpath = os.path.join( sys.path[0],".." )
foolpath = os.path.abspath( foolpath )
sys.path.append( foolpath )
import fool
import testsuite

def makeDisk():
    print("foo")
    fool.go( ["hd.img","create","64", ])
    testsuite.copy(fool)
    fool.go( ["hd.img","ls" ])

#our source files
sourcefiles = [ "kernelasm.s", "kernelc.c", "console.c", "kprintf.c", "font.c", "disk.c", "utility.c", "testsuite.c", "interrupt.c", "crtc.c", "crtasm.s", "userex.c", "exec.c"]

# c compiler
cc = os.path.abspath( os.path.join("..","gcc","bin","arm-none-eabi-gcc") )

#linker
link = os.path.abspath( os.path.join("..","gcc","bin","arm-none-eabi-ld") )

#object copier
objcopy = os.path.abspath( os.path.join("..","gcc","bin","arm-none-eabi-objcopy") )

#qemu
qemu = r"c:\program files\qemu\qemu-system-arm"

#override with environment variables, if they are set
cc = os.getenv("CC",cc)
link = os.getenv("LD",link)
objcopy = os.getenv("OBJCOPY", objcopy)
qemu = os.getenv("QEMU",qemu)
asm = cc


ccflags=["-O0","-Wall", "-mcpu=arm926ej-s", "-marm", "-Werror",
    "-fno-builtin","-mgeneral-regs-only",
    "-nostdinc", "-nostdlib", "-ffreestanding"]
ccflags += [ "-DINTERRUPT_TEST=" + os.getenv("INTERRUPT_TEST", "2" ) ]
#Pre Executables lab script
#lflags=["-Map","kernelmap.txt", "-T","linkerscript.txt","-o","kernel.exe"]
#Post Executables lab script
lflags=["-Map","kernelmap.txt", "-T","linkerscript2.txt","-o","kernel.exe"]

asmflags=["-c","-x","assembler-with-cpp","-mcpu=arm926ej-s"]
qemuFlags =["-machine","integratorcp","-kernel","kernel.bin","-serial",
    "mon:stdio", "-echr", "126", "-sd", "hd.img" ]

env = Environment( ENV=os.environ,
    tools=["gcc","gnulink","as"])

userccflags = ccflags + ["-static-pie","-fPIE"]
env.StaticObject( "crtasm.o", "crtasm.s",
    AS=asm, ASFLAGS=asmflags, CC=cc,
    LINK=link, CCFLAGS=userccflags)
env.StaticObject( "crtc.o", "crtc.c",
    AS=asm, ASFLAGS=asmflags, CC=cc,
    LINK=link, CCFLAGS=userccflags)

def makeUserExe(stem):
    env.Program(target=stem+".exe",
        source=["crtasm.o","crtc.o",stem+".c"],
        AS=asm, ASFLAGS=asmflags, CC=cc,
        LINK=link, CCFLAGS=userccflags,
        LINKFLAGS=["-T","linkerscript2.txt","-o",stem+".exe"] )
    env.Command(stem+".bin",stem+".exe",
        "{} -Obinary {}.exe {}.bin".format(objcopy,stem,stem) )

env.Program(target="kernel.exe",
            source=sourcefiles,
            AS=asm, ASFLAGS=asmflags, CC=cc, LINK=link, CCFLAGS=ccflags, LINKFLAGS=lflags )
env.Command("kernel.bin","kernel.exe", "{} -Obinary kernel.exe kernel.bin".format(objcopy) )
makeUserExe("userex")
env.Command("hd.img", ["kernel.bin","userex.bin"], lambda source,target,env: makeDisk() )
env.Command("actually run the thing", "hd.img", lambda source,target,env: subprocess.check_call( [qemu]+qemuFlags ) )